// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: proto/RMS.proto

package go_grpc_crud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RMSServiceClient is the client API for RMSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RMSServiceClient interface {
	CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error)
	GetAuthor(ctx context.Context, in *ReadAuthorRequest, opts ...grpc.CallOption) (*ReadAuthorResponse, error)
	GetAuthors(ctx context.Context, in *ReadAuthorsRequest, opts ...grpc.CallOption) (*ReadAuthorsResponse, error)
	UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, opts ...grpc.CallOption) (*UpdateAuthorResponse, error)
	DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, opts ...grpc.CallOption) (*DeleteAuthorResponse, error)
	CreateIP_Asset(ctx context.Context, in *CreateIP_AssetRequest, opts ...grpc.CallOption) (*CreateIP_AssetResponse, error)
	GetIP_Asset(ctx context.Context, in *ReadIP_AssetRequest, opts ...grpc.CallOption) (*ReadIP_AssetResponse, error)
	GetIP_Assets(ctx context.Context, in *ReadIP_AssetsRequest, opts ...grpc.CallOption) (*ReadIP_AssetsResponse, error)
	UpdateIP_Asset(ctx context.Context, in *UpdateIP_AssetRequest, opts ...grpc.CallOption) (*UpdateIP_AssetResponse, error)
	DeleteIP_Asset(ctx context.Context, in *DeleteIP_AssetRequest, opts ...grpc.CallOption) (*DeleteIP_AssetResponse, error)
	CreatePublication(ctx context.Context, in *CreatePublicationRequest, opts ...grpc.CallOption) (*CreatePublicationResponse, error)
	GetPublication(ctx context.Context, in *ReadPublicationRequest, opts ...grpc.CallOption) (*ReadPublicationResponse, error)
	GetPublications(ctx context.Context, in *ReadPublicationsRequest, opts ...grpc.CallOption) (*ReadPublicationsResponse, error)
	UpdatePublication(ctx context.Context, in *UpdatePublicationRequest, opts ...grpc.CallOption) (*UpdatePublicationResponse, error)
	DeletePublication(ctx context.Context, in *DeletePublicationRequest, opts ...grpc.CallOption) (*DeletePublicationResponse, error)
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	GetUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserResponse, error)
	GetUsers(ctx context.Context, in *ReadUsersRequest, opts ...grpc.CallOption) (*ReadUsersResponse, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*CreateLogResponse, error)
	GetLog(ctx context.Context, in *ReadLogRequest, opts ...grpc.CallOption) (*ReadLogResponse, error)
	GetLogs(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (*ReadLogsResponse, error)
	UpdateLog(ctx context.Context, in *UpdateLogRequest, opts ...grpc.CallOption) (*UpdateLogResponse, error)
	DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...grpc.CallOption) (*DeleteLogResponse, error)
}

type rMSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRMSServiceClient(cc grpc.ClientConnInterface) RMSServiceClient {
	return &rMSServiceClient{cc}
}

func (c *rMSServiceClient) CreateAuthor(ctx context.Context, in *CreateAuthorRequest, opts ...grpc.CallOption) (*CreateAuthorResponse, error) {
	out := new(CreateAuthorResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/CreateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetAuthor(ctx context.Context, in *ReadAuthorRequest, opts ...grpc.CallOption) (*ReadAuthorResponse, error) {
	out := new(ReadAuthorResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetAuthors(ctx context.Context, in *ReadAuthorsRequest, opts ...grpc.CallOption) (*ReadAuthorsResponse, error) {
	out := new(ReadAuthorsResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetAuthors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) UpdateAuthor(ctx context.Context, in *UpdateAuthorRequest, opts ...grpc.CallOption) (*UpdateAuthorResponse, error) {
	out := new(UpdateAuthorResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/UpdateAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) DeleteAuthor(ctx context.Context, in *DeleteAuthorRequest, opts ...grpc.CallOption) (*DeleteAuthorResponse, error) {
	out := new(DeleteAuthorResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/DeleteAuthor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) CreateIP_Asset(ctx context.Context, in *CreateIP_AssetRequest, opts ...grpc.CallOption) (*CreateIP_AssetResponse, error) {
	out := new(CreateIP_AssetResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/CreateIP_Asset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetIP_Asset(ctx context.Context, in *ReadIP_AssetRequest, opts ...grpc.CallOption) (*ReadIP_AssetResponse, error) {
	out := new(ReadIP_AssetResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetIP_Asset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetIP_Assets(ctx context.Context, in *ReadIP_AssetsRequest, opts ...grpc.CallOption) (*ReadIP_AssetsResponse, error) {
	out := new(ReadIP_AssetsResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetIP_Assets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) UpdateIP_Asset(ctx context.Context, in *UpdateIP_AssetRequest, opts ...grpc.CallOption) (*UpdateIP_AssetResponse, error) {
	out := new(UpdateIP_AssetResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/UpdateIP_Asset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) DeleteIP_Asset(ctx context.Context, in *DeleteIP_AssetRequest, opts ...grpc.CallOption) (*DeleteIP_AssetResponse, error) {
	out := new(DeleteIP_AssetResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/DeleteIP_Asset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) CreatePublication(ctx context.Context, in *CreatePublicationRequest, opts ...grpc.CallOption) (*CreatePublicationResponse, error) {
	out := new(CreatePublicationResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/CreatePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetPublication(ctx context.Context, in *ReadPublicationRequest, opts ...grpc.CallOption) (*ReadPublicationResponse, error) {
	out := new(ReadPublicationResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetPublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetPublications(ctx context.Context, in *ReadPublicationsRequest, opts ...grpc.CallOption) (*ReadPublicationsResponse, error) {
	out := new(ReadPublicationsResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetPublications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) UpdatePublication(ctx context.Context, in *UpdatePublicationRequest, opts ...grpc.CallOption) (*UpdatePublicationResponse, error) {
	out := new(UpdatePublicationResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/UpdatePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) DeletePublication(ctx context.Context, in *DeletePublicationRequest, opts ...grpc.CallOption) (*DeletePublicationResponse, error) {
	out := new(DeletePublicationResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/DeletePublication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetUser(ctx context.Context, in *ReadUserRequest, opts ...grpc.CallOption) (*ReadUserResponse, error) {
	out := new(ReadUserResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetUsers(ctx context.Context, in *ReadUsersRequest, opts ...grpc.CallOption) (*ReadUsersResponse, error) {
	out := new(ReadUsersResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*UpdateUserResponse, error) {
	out := new(UpdateUserResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*CreateLogResponse, error) {
	out := new(CreateLogResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/CreateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetLog(ctx context.Context, in *ReadLogRequest, opts ...grpc.CallOption) (*ReadLogResponse, error) {
	out := new(ReadLogResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) GetLogs(ctx context.Context, in *ReadLogsRequest, opts ...grpc.CallOption) (*ReadLogsResponse, error) {
	out := new(ReadLogsResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) UpdateLog(ctx context.Context, in *UpdateLogRequest, opts ...grpc.CallOption) (*UpdateLogResponse, error) {
	out := new(UpdateLogResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/UpdateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rMSServiceClient) DeleteLog(ctx context.Context, in *DeleteLogRequest, opts ...grpc.CallOption) (*DeleteLogResponse, error) {
	out := new(DeleteLogResponse)
	err := c.cc.Invoke(ctx, "/proto.RMSService/DeleteLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RMSServiceServer is the server API for RMSService service.
// All implementations must embed UnimplementedRMSServiceServer
// for forward compatibility
type RMSServiceServer interface {
	CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error)
	GetAuthor(context.Context, *ReadAuthorRequest) (*ReadAuthorResponse, error)
	GetAuthors(context.Context, *ReadAuthorsRequest) (*ReadAuthorsResponse, error)
	UpdateAuthor(context.Context, *UpdateAuthorRequest) (*UpdateAuthorResponse, error)
	DeleteAuthor(context.Context, *DeleteAuthorRequest) (*DeleteAuthorResponse, error)
	CreateIP_Asset(context.Context, *CreateIP_AssetRequest) (*CreateIP_AssetResponse, error)
	GetIP_Asset(context.Context, *ReadIP_AssetRequest) (*ReadIP_AssetResponse, error)
	GetIP_Assets(context.Context, *ReadIP_AssetsRequest) (*ReadIP_AssetsResponse, error)
	UpdateIP_Asset(context.Context, *UpdateIP_AssetRequest) (*UpdateIP_AssetResponse, error)
	DeleteIP_Asset(context.Context, *DeleteIP_AssetRequest) (*DeleteIP_AssetResponse, error)
	CreatePublication(context.Context, *CreatePublicationRequest) (*CreatePublicationResponse, error)
	GetPublication(context.Context, *ReadPublicationRequest) (*ReadPublicationResponse, error)
	GetPublications(context.Context, *ReadPublicationsRequest) (*ReadPublicationsResponse, error)
	UpdatePublication(context.Context, *UpdatePublicationRequest) (*UpdatePublicationResponse, error)
	DeletePublication(context.Context, *DeletePublicationRequest) (*DeletePublicationResponse, error)
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	GetUser(context.Context, *ReadUserRequest) (*ReadUserResponse, error)
	GetUsers(context.Context, *ReadUsersRequest) (*ReadUsersResponse, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	CreateLog(context.Context, *CreateLogRequest) (*CreateLogResponse, error)
	GetLog(context.Context, *ReadLogRequest) (*ReadLogResponse, error)
	GetLogs(context.Context, *ReadLogsRequest) (*ReadLogsResponse, error)
	UpdateLog(context.Context, *UpdateLogRequest) (*UpdateLogResponse, error)
	DeleteLog(context.Context, *DeleteLogRequest) (*DeleteLogResponse, error)
	mustEmbedUnimplementedRMSServiceServer()
}

// UnimplementedRMSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRMSServiceServer struct {
}

func (UnimplementedRMSServiceServer) CreateAuthor(context.Context, *CreateAuthorRequest) (*CreateAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthor not implemented")
}
func (UnimplementedRMSServiceServer) GetAuthor(context.Context, *ReadAuthorRequest) (*ReadAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthor not implemented")
}
func (UnimplementedRMSServiceServer) GetAuthors(context.Context, *ReadAuthorsRequest) (*ReadAuthorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthors not implemented")
}
func (UnimplementedRMSServiceServer) UpdateAuthor(context.Context, *UpdateAuthorRequest) (*UpdateAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuthor not implemented")
}
func (UnimplementedRMSServiceServer) DeleteAuthor(context.Context, *DeleteAuthorRequest) (*DeleteAuthorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthor not implemented")
}
func (UnimplementedRMSServiceServer) CreateIP_Asset(context.Context, *CreateIP_AssetRequest) (*CreateIP_AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIP_Asset not implemented")
}
func (UnimplementedRMSServiceServer) GetIP_Asset(context.Context, *ReadIP_AssetRequest) (*ReadIP_AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP_Asset not implemented")
}
func (UnimplementedRMSServiceServer) GetIP_Assets(context.Context, *ReadIP_AssetsRequest) (*ReadIP_AssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIP_Assets not implemented")
}
func (UnimplementedRMSServiceServer) UpdateIP_Asset(context.Context, *UpdateIP_AssetRequest) (*UpdateIP_AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIP_Asset not implemented")
}
func (UnimplementedRMSServiceServer) DeleteIP_Asset(context.Context, *DeleteIP_AssetRequest) (*DeleteIP_AssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIP_Asset not implemented")
}
func (UnimplementedRMSServiceServer) CreatePublication(context.Context, *CreatePublicationRequest) (*CreatePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePublication not implemented")
}
func (UnimplementedRMSServiceServer) GetPublication(context.Context, *ReadPublicationRequest) (*ReadPublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublication not implemented")
}
func (UnimplementedRMSServiceServer) GetPublications(context.Context, *ReadPublicationsRequest) (*ReadPublicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublications not implemented")
}
func (UnimplementedRMSServiceServer) UpdatePublication(context.Context, *UpdatePublicationRequest) (*UpdatePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePublication not implemented")
}
func (UnimplementedRMSServiceServer) DeletePublication(context.Context, *DeletePublicationRequest) (*DeletePublicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePublication not implemented")
}
func (UnimplementedRMSServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRMSServiceServer) GetUser(context.Context, *ReadUserRequest) (*ReadUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedRMSServiceServer) GetUsers(context.Context, *ReadUsersRequest) (*ReadUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedRMSServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*UpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedRMSServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedRMSServiceServer) CreateLog(context.Context, *CreateLogRequest) (*CreateLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLog not implemented")
}
func (UnimplementedRMSServiceServer) GetLog(context.Context, *ReadLogRequest) (*ReadLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLog not implemented")
}
func (UnimplementedRMSServiceServer) GetLogs(context.Context, *ReadLogsRequest) (*ReadLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedRMSServiceServer) UpdateLog(context.Context, *UpdateLogRequest) (*UpdateLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLog not implemented")
}
func (UnimplementedRMSServiceServer) DeleteLog(context.Context, *DeleteLogRequest) (*DeleteLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLog not implemented")
}
func (UnimplementedRMSServiceServer) mustEmbedUnimplementedRMSServiceServer() {}

// UnsafeRMSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RMSServiceServer will
// result in compilation errors.
type UnsafeRMSServiceServer interface {
	mustEmbedUnimplementedRMSServiceServer()
}

func RegisterRMSServiceServer(s grpc.ServiceRegistrar, srv RMSServiceServer) {
	s.RegisterService(&RMSService_ServiceDesc, srv)
}

func _RMSService_CreateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).CreateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/CreateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).CreateAuthor(ctx, req.(*CreateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetAuthor(ctx, req.(*ReadAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetAuthors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAuthorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetAuthors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetAuthors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetAuthors(ctx, req.(*ReadAuthorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_UpdateAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).UpdateAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/UpdateAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).UpdateAuthor(ctx, req.(*UpdateAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_DeleteAuthor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).DeleteAuthor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/DeleteAuthor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).DeleteAuthor(ctx, req.(*DeleteAuthorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_CreateIP_Asset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIP_AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).CreateIP_Asset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/CreateIP_Asset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).CreateIP_Asset(ctx, req.(*CreateIP_AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetIP_Asset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIP_AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetIP_Asset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetIP_Asset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetIP_Asset(ctx, req.(*ReadIP_AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetIP_Assets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadIP_AssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetIP_Assets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetIP_Assets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetIP_Assets(ctx, req.(*ReadIP_AssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_UpdateIP_Asset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIP_AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).UpdateIP_Asset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/UpdateIP_Asset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).UpdateIP_Asset(ctx, req.(*UpdateIP_AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_DeleteIP_Asset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIP_AssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).DeleteIP_Asset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/DeleteIP_Asset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).DeleteIP_Asset(ctx, req.(*DeleteIP_AssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_CreatePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).CreatePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/CreatePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).CreatePublication(ctx, req.(*CreatePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetPublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetPublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetPublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetPublication(ctx, req.(*ReadPublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetPublications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPublicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetPublications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetPublications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetPublications(ctx, req.(*ReadPublicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_UpdatePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).UpdatePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/UpdatePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).UpdatePublication(ctx, req.(*UpdatePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_DeletePublication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePublicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).DeletePublication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/DeletePublication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).DeletePublication(ctx, req.(*DeletePublicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetUser(ctx, req.(*ReadUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetUsers(ctx, req.(*ReadUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/CreateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).CreateLog(ctx, req.(*CreateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetLog(ctx, req.(*ReadLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).GetLogs(ctx, req.(*ReadLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_UpdateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).UpdateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/UpdateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).UpdateLog(ctx, req.(*UpdateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RMSService_DeleteLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RMSServiceServer).DeleteLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RMSService/DeleteLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RMSServiceServer).DeleteLog(ctx, req.(*DeleteLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RMSService_ServiceDesc is the grpc.ServiceDesc for RMSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RMSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RMSService",
	HandlerType: (*RMSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuthor",
			Handler:    _RMSService_CreateAuthor_Handler,
		},
		{
			MethodName: "GetAuthor",
			Handler:    _RMSService_GetAuthor_Handler,
		},
		{
			MethodName: "GetAuthors",
			Handler:    _RMSService_GetAuthors_Handler,
		},
		{
			MethodName: "UpdateAuthor",
			Handler:    _RMSService_UpdateAuthor_Handler,
		},
		{
			MethodName: "DeleteAuthor",
			Handler:    _RMSService_DeleteAuthor_Handler,
		},
		{
			MethodName: "CreateIP_Asset",
			Handler:    _RMSService_CreateIP_Asset_Handler,
		},
		{
			MethodName: "GetIP_Asset",
			Handler:    _RMSService_GetIP_Asset_Handler,
		},
		{
			MethodName: "GetIP_Assets",
			Handler:    _RMSService_GetIP_Assets_Handler,
		},
		{
			MethodName: "UpdateIP_Asset",
			Handler:    _RMSService_UpdateIP_Asset_Handler,
		},
		{
			MethodName: "DeleteIP_Asset",
			Handler:    _RMSService_DeleteIP_Asset_Handler,
		},
		{
			MethodName: "CreatePublication",
			Handler:    _RMSService_CreatePublication_Handler,
		},
		{
			MethodName: "GetPublication",
			Handler:    _RMSService_GetPublication_Handler,
		},
		{
			MethodName: "GetPublications",
			Handler:    _RMSService_GetPublications_Handler,
		},
		{
			MethodName: "UpdatePublication",
			Handler:    _RMSService_UpdatePublication_Handler,
		},
		{
			MethodName: "DeletePublication",
			Handler:    _RMSService_DeletePublication_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _RMSService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _RMSService_GetUser_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _RMSService_GetUsers_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _RMSService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _RMSService_DeleteUser_Handler,
		},
		{
			MethodName: "CreateLog",
			Handler:    _RMSService_CreateLog_Handler,
		},
		{
			MethodName: "GetLog",
			Handler:    _RMSService_GetLog_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _RMSService_GetLogs_Handler,
		},
		{
			MethodName: "UpdateLog",
			Handler:    _RMSService_UpdateLog_Handler,
		},
		{
			MethodName: "DeleteLog",
			Handler:    _RMSService_DeleteLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/RMS.proto",
}
